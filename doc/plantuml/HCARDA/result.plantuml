@startuml



  namespace de.gematik.ti.healthcardaccess {
    namespace result {
      class de.gematik.ti.healthcardaccess.result.Response {
          - responseData : byte[]
          + Response()
          + getResponseData()
          + getResponseStatus()
      }
    }
  }
  

  namespace de.gematik.ti.healthcardaccess {
    namespace result {
      enum ResponseStatus {
        AUTHENTICATION_FAILURE
        CHANNEL_CLOSED
        COMMAND_BLOCKED
        CORRUPT_DATA_WARNING
        DATA_TOO_BIG
        DATA_TRUNCATED
        DF_NAME_EXISTS
        DUPLICATED_OBJECTS
        ENCIPHER_ERROR
        END_OF_FILE_WARNING
        END_OF_RECORD_WARNING
        FILE_DEACTIVATED
        FILE_NOT_FOUND
        FILE_TERMINATED
        FULL_RECORD_LIST
        INCONSISTENT_KEY_REFERENCE
        INCORRECT_SM_DO
        INSTRUCTION_NOT_SUPPORTED
        KEY_ALREADY_PRESENT
        KEY_EXPIRED
        KEY_INVALID
        KEY_NOT_FOUND
        KEY_OR_PRK_NOT_FOUND
        MEMORY_FAILURE
        MESSAGE_TOO_LONG
        NEW_FILE_SIZE_WRONG
        NO_AUTHENTICATION
        NO_CURRENT_EF
        NO_KEY_REFERENCE
        NO_MORE_CHANNELS_AVAILABLE
        NO_PRK_REFERENCE
        NO_PUK_REFERENCE
        NO_RANDOM
        NO_RECORD_LIFE_CYCLE_STATUS
        NUMBER_PRECONDITION_WRONG
        NUMBER_SCENARIO_WRONG
        OBJECT_TERMINATED
        OFFSET_TOO_BIG
        OUT_OF_MEMORY
        PARAMETER_MISMATCH
        PASSWORD_BLOCKED
        PASSWORD_DISABLED
        PASSWORD_NOT_FOUND
        PASSWORD_NOT_USABLE
        PRK_NOT_FOUND
        PUK_NOT_FOUND
        RECORD_DEACTIVATED
        RECORD_NOT_FOUND
        RETRY_COUNTER_COUNT_00
        RETRY_COUNTER_COUNT_01
        RETRY_COUNTER_COUNT_02
        RETRY_COUNTER_COUNT_03
        RETRY_COUNTER_COUNT_04
        RETRY_COUNTER_COUNT_05
        RETRY_COUNTER_COUNT_06
        RETRY_COUNTER_COUNT_07
        RETRY_COUNTER_COUNT_08
        RETRY_COUNTER_COUNT_09
        RETRY_COUNTER_COUNT_10
        RETRY_COUNTER_COUNT_11
        RETRY_COUNTER_COUNT_12
        RETRY_COUNTER_COUNT_13
        RETRY_COUNTER_COUNT_14
        RETRY_COUNTER_COUNT_15
        SECURITY_STATUS_NOT_SATISFIED
        SUCCESS
        TRANSPORT_STATUS_EMPTY_PIN
        TRANSPORT_STATUS_TRANSPORT_PIN
        UNKNOWN_EXCEPTION
        UNKNOWN_STATUS
        UNSUCCESSFUL_SEARCH
        UNSUPPORTED_FUNCTION
        UPDATE_RETRY_WARNING_COUNT_00
        UPDATE_RETRY_WARNING_COUNT_01
        UPDATE_RETRY_WARNING_COUNT_02
        UPDATE_RETRY_WARNING_COUNT_03
        UPDATE_RETRY_WARNING_COUNT_04
        UPDATE_RETRY_WARNING_COUNT_05
        UPDATE_RETRY_WARNING_COUNT_06
        UPDATE_RETRY_WARNING_COUNT_07
        UPDATE_RETRY_WARNING_COUNT_08
        UPDATE_RETRY_WARNING_COUNT_09
        UPDATE_RETRY_WARNING_COUNT_10
        UPDATE_RETRY_WARNING_COUNT_11
        UPDATE_RETRY_WARNING_COUNT_12
        UPDATE_RETRY_WARNING_COUNT_13
        UPDATE_RETRY_WARNING_COUNT_14
        UPDATE_RETRY_WARNING_COUNT_15
        VERIFICATION_ERROR
        VOLATILE_KEY_WITHOUT_LCS
        WRONG_CIPHER_TEXT
        WRONG_FILE_TYPE
        WRONG_KEY_REFERENCE
        WRONG_PASSWORD_LENGTH
        WRONG_RANDOM_LENGTH
        WRONG_RANDOM_OR_NO_KEY_REFERENCE
        WRONG_RECORD_LENGTH
        WRONG_SECRET_WARNING_COUNT_00
        WRONG_SECRET_WARNING_COUNT_01
        WRONG_SECRET_WARNING_COUNT_02
        WRONG_SECRET_WARNING_COUNT_03
        WRONG_SECRET_WARNING_COUNT_04
        WRONG_SECRET_WARNING_COUNT_05
        WRONG_SECRET_WARNING_COUNT_06
        WRONG_SECRET_WARNING_COUNT_07
        WRONG_SECRET_WARNING_COUNT_08
        WRONG_SECRET_WARNING_COUNT_09
        WRONG_SECRET_WARNING_COUNT_10
        WRONG_SECRET_WARNING_COUNT_11
        WRONG_SECRET_WARNING_COUNT_12
        WRONG_SECRET_WARNING_COUNT_13
        WRONG_SECRET_WARNING_COUNT_14
        WRONG_SECRET_WARNING_COUNT_15
        WRONG_TOKEN
      }
    }
  }
  

  namespace de.gematik.ti.healthcardaccess {
    namespace result {
      enum ResponseStatusSet {
        PROCESS_ABORTED
        PROCESS_ABORTED_6981_COMMAND_INCOMPATIBLE_TO_FILE_STRUCTURE
        PROCESS_ABORTED_6983_ERROR_AUTHENTICATION_MODE_BLOCKED
        PROCESS_ABORTED_6985_USAGE_CONDITIONS_NOT_SATISFIED
        PROCESS_ABORTED_6A80_PARAMETERS_IN_DATA_PORTION_INCORRECT
        PROCESS_ABORTED_6A84_INSUFFICIENT_MEMORY
        PROCESS_ABORTED_6A88_REFERENCED_DATA_NOT_FOUND
        PROCESS_ABORTED_WITH_EXECUTION_ERROR
        PROCESS_ABORTED_WITH_EXECUTION_ERROR_DATA_MODIFIED
        PROCESS_ABORTED_WITH_EXECUTION_ERROR_NO_DATA_MODIFIED
        PROCESS_ABORTED_WITH_VERIFICATION_ERROR
        PROCESS_COMPLETED
        PROCESS_COMPLETED_6282_FEWER_BYTES_THAN_SPECIFIED_OR_FILE_NOT_FOUND
        PROCESS_COMPLETED_63CX_COUNTER_MODIFIED
        PROCESS_COMPLETED_NORMAL
        PROCESS_COMPLETED_WITH_STATUS_9000
        PROCESS_COMPLETED_WITH_WARNING
        PROCESS_COMPLETED_WITH_WARNING_DATA_MODIFIED
        PROCESS_COMPLETED_WITH_WARNING_NO_DATA_MODIFIED
        range
        set
      }
    }
  }
  

  de.gematik.ti.healthcardaccess.result.Response o-- de.gematik.ti.healthcardaccess.result.Response.ResponseStatus : responseStatus
  de.gematik.ti.healthcardaccess.result.Response +-down- de.gematik.ti.healthcardaccess.result.Response.ResponseStatus
  de.gematik.ti.healthcardaccess.result.Response +-down- de.gematik.ti.healthcardaccess.result.Response.ResponseStatusSet









@enduml
