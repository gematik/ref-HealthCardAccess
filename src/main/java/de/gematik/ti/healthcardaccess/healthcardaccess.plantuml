@startuml

title __HEALTHCARDACCESS's Class Diagram__\n

  namespace de.gematik.ti.healthcardaccess {
    abstract class de.gematik.ti.healthcardaccess.AbstractHealthCardCommand {
        {static} # EXPECT_ALL_WILDCARD : int
        {static} # NE_MAX_EXTENDED_LENGTH : int
        {static} # NE_MAX_SHORT_LENGTH : int
        # cla : int
        # data : byte[]
        # ins : int
        # ne : Integer
        # p1 : int
        # p2 : int
        {static} - CODE_CHANNEL_CLOSED : int
        {static} - HEX_FF : int
        {static} - LOG : Logger
        + executeOn()
        {abstract} + getStatusResponseMessages()
        # AbstractHealthCardCommand()
        # AbstractHealthCardCommand()
        # sendApdu()
        - getCommandApdu()
        - inferResponseStatusFromResponseCode()
    }
  }
  

  namespace de.gematik.ti.healthcardaccess {
    class de.gematik.ti.healthcardaccess.HealthCard {
        {static} + BASIC_CHANNEL_IDX : int
        {static} # MAX_LOGICAL_CHANNELS : int
        - associatedCard : ICard
        - currentCardChannel : ICardChannel
        - openChannels : Vector<ICardChannel>
        + HealthCard()
        + closeChannel()
        + getCurrentCardChannel()
        + getStatus()
        + openLogicalChannel()
        + setChannel()
        + setHealthCardType()
        # HealthCard()
    }
  }
  

  namespace de.gematik.ti.healthcardaccess {
    interface de.gematik.ti.healthcardaccess.ICardItem {
    }
  }
  

  namespace de.gematik.ti.healthcardaccess {
    interface de.gematik.ti.healthcardaccess.IHealthCard {
        {abstract} + getCurrentCardChannel()
        {abstract} + getStatus()
    }
  }
  

  namespace de.gematik.ti.healthcardaccess {
    interface de.gematik.ti.healthcardaccess.IHealthCardCommand {
        {abstract} + executeOn()
    }
  }
  

  namespace de.gematik.ti.healthcardaccess {
    interface de.gematik.ti.healthcardaccess.IHealthCardStatus {
        {abstract} + isValid()
    }
  }
  

  namespace de.gematik.ti.healthcardaccess {
    interface de.gematik.ti.healthcardaccess.IHealthCardType {
    }
  }
  

  namespace de.gematik.ti.healthcardaccess {
    class de.gematik.ti.healthcardaccess.WrongCardChannelException {
        + WrongCardChannelException()
        + WrongCardChannelException()
        + WrongCardChannelException()
    }
  }
  

  namespace de.gematik.ti.healthcardaccess {
    class de.gematik.ti.healthcardaccess.WrongCardDataException {
        + WrongCardDataException()
        + WrongCardDataException()
        + WrongCardDataException()
    }
  }
  

  de.gematik.ti.healthcardaccess.AbstractHealthCardCommand .up.|> de.gematik.ti.healthcardaccess.IHealthCardCommand
  de.gematik.ti.healthcardaccess.AbstractHealthCardCommand o-- de.gematik.ti.healthcardaccess.result.Response : response
  de.gematik.ti.healthcardaccess.HealthCard .up.|> de.gematik.ti.healthcardaccess.IHealthCard
  de.gematik.ti.healthcardaccess.HealthCard o-- de.gematik.ti.healthcardaccess.IHealthCardStatus : status


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
