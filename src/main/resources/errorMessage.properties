#
# Copyright (c) 2020 gematik GmbH
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
CmdDataLength.errMsg=Wrong length (%s) of cmdData. It must be %s.
#
ExternalMutualAuthenticateCommand.errMsg=To execute an external/mutual authentication operation the selected Algorithm has to be from the set %s. Provided algorithm was %s.
#
FingerprintCommand.errMsg=Length of provided prefix must be 128.
#
GenerateAsymmetricKeyPairCommand.errMsg=HealthCardStatusUnknown Use Case in Constructor GenerateAsymmetricKeyPairCommand().
#
GetChallengeCommand.errMsg=Argument numberOfExpectedOctets %d not in set {8,16}.
#
GetRandomCommand.errMsg=Argument numberOfExpectedOctetsInResponse %d out of range [%d,%d].
#
CmdDataInvalidStructure.errMsg=Data in Command must be in valid structure. Error is %s.
#
InternalAuthenticateCommand.errMsg=To execute an internal authentication operation the selected Algorithm has to be from the set %s. Provided algorithm was %s.
#
#LoadApplicationCommand.errMsg=to fill ..................
#
Offset.errMsg=Offset '%d' out of range [%d,%d].
#
ManageChannelCommand.errMsg=Logical Channel number must not be 0.
#
ManageSecurityEnvironmentCommand.MseUseCase.errMsg=For this constructor of ManageSecurityEnvironmentCommand the chosen use case must be from the set %s. 
#
ManageSecurityEnvironmentCommand.idDomain.errMsg=ID domain Parameter not valid (must be in set {0x0D, 0x10, 0x11} see gemSpec_COS#N102.454.
#
ManageSecurityEnvironmentCommand.seNumber.errMsg=Argument security environment number %d out of range [%d,%d]
#
ManageSecurityEnvironmentCommand.Key.errMsg=Provided key argument for selected use case %s must be not null.
#
ManageSecurityEnvironmentCommand.Status.errMsg=HealthCardStatusUnknown Use Case in ManageSecurityEnvironmentCommand.
#
RecordNumber.errMsg=Record number '%d' out of range [%d,%d].
#
RecordData.errMsg=Record data length '%d' out of range [%d,%d].
#
RecordSearchData.errMsg=Record search string length '%d' out of range [%d,%d].
#
PsoComputeCryptographicChecksum.errMsg=To compute a cryptographic checksum the selected Algorithm has to be from the set %s. Provided algorithm was %s
#
PsoVerifyCryptographicChecksum.errMsg=.....to be fill out.....
#
PsoVerifyCryptographicChecksum.MAC.errMsg=The length of MAC must be 8.
#
PsoComputeDigitalSignatureCommand.errMsg=To compute a digital signature the selected Algorithm has to be from the set %s. Provided algorithm was %s
#
PsoDecipher.errMsg=To execute a decipher operation the selected Algorithm has to be from the set %s. Provided algorithm was %s.
#
PsoEncipher.RSA.errMsg=To execute an encipher operation with a transmitted RSA key the selected Algorithm has to be from the set %s. Provided algorithm was %s.
#
PsoEncipher.ELC.errMsg=To execute an encipher operation with a transmitted ELC key the selected Algorithm has to be from the set %s. Provided algorithm was %s.
#
PsoEncipher.errMsg=To execute an encipher operation with an algorithm stored on the card the selected Algorithm has to be from the set %s. Provided algorithm was %s.
#
PsoVerifyDigitalSignatureCommand.errMsg=...............
#
#ReadCommand.errMsg=to fill ..................
#
#UpdateCommand.errMsg=........
#
#WriteCommand.errMsg=........
